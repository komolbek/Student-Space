// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentPlus;

#nullable disable

namespace Studentplus.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230120180726_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("StudentPlus.DomainModels.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("student_id");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("course");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("GraduationDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("graduation_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("student_number");

                    b.HasKey("StudentId");

                    b.ToTable("STUDENT");
                });

            modelBuilder.Entity("StudentPlus.DomainModels.Supervisee", b =>
                {
                    b.Property<string>("SuperviseeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisee_id");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("student_number");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisor_id");

                    b.HasKey("SuperviseeId");

                    b.ToTable("SUPERVISEE");
                });

            modelBuilder.Entity("StudentPlus.DomainModels.Supervisor", b =>
                {
                    b.Property<string>("SupervisorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisor_id");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("department");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("SupervisorNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisor_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("SupervisorId");

                    b.ToTable("SUPERVISOR");
                });

            modelBuilder.Entity("StudentPlus.DomainModels.Token", b =>
                {
                    b.Property<string>("TokenId")
                        .HasColumnType("TEXT")
                        .HasColumnName("token_id");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("TokenId");

                    b.ToTable("TOKEN");
                });

            modelBuilder.Entity("Student_plus.DomainModels.Draft", b =>
                {
                    b.Property<string>("DraftId")
                        .HasColumnType("TEXT")
                        .HasColumnName("draft_id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_path");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("student_id");

                    b.Property<string>("SubmittedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("submitted_date");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisor_id");

                    b.HasKey("DraftId");

                    b.ToTable("DRAFT");
                });

            modelBuilder.Entity("Student_plus.DomainModels.DraftFeedback", b =>
                {
                    b.Property<string>("DFeedbackId")
                        .HasColumnType("TEXT")
                        .HasColumnName("d_feedback_id");

                    b.Property<string>("DFeedbackText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("d_feedback_text");

                    b.Property<string>("DResponseDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("d_response_date");

                    b.Property<string>("DraftId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("draft_id");

                    b.Property<string>("SupervisorNum")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisor_num");

                    b.HasKey("DFeedbackId");

                    b.ToTable("DRAFT_FEEDBACK");
                });

            modelBuilder.Entity("Student_plus.DomainModels.Meeting", b =>
                {
                    b.Property<string>("MeetingId")
                        .HasColumnType("TEXT")
                        .HasColumnName("meeting_id");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("end_time");

                    b.Property<string>("MRecordingId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("m_recording_id");

                    b.Property<string>("OrganiserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("organiser_id");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("start_time");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("topic");

                    b.Property<string>("Transcript")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("transcript");

                    b.HasKey("MeetingId");

                    b.ToTable("MEETING");
                });

            modelBuilder.Entity("Student_plus.DomainModels.MeetingAttendee", b =>
                {
                    b.Property<string>("MAttendeeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("m_attendee_id");

                    b.Property<string>("AttendeeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("attendee_number");

                    b.Property<string>("MeetingId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("meeting_id");

                    b.HasKey("MAttendeeId");

                    b.ToTable("MEETING_ATTENDEE");
                });

            modelBuilder.Entity("Student_plus.DomainModels.MeetingFeedback", b =>
                {
                    b.Property<string>("MFeedbackId")
                        .HasColumnType("TEXT")
                        .HasColumnName("m_feedback_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("FeedbackText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("feedback_text");

                    b.Property<string>("MeetingId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("meeting_id");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rating");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("student_number");

                    b.HasKey("MFeedbackId");

                    b.ToTable("MEETING_FEEDBACK");
                });

            modelBuilder.Entity("Student_plus.DomainModels.MeetingFeedbackCatergory", b =>
                {
                    b.Property<string>("FCategoryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("f_category_id");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("category_description");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("category_name");

                    b.HasKey("FCategoryId");

                    b.ToTable("MEETING_FEEDBACK_CATEGORY");
                });

            modelBuilder.Entity("Student_plus.DomainModels.MeetingFeedbackResponse", b =>
                {
                    b.Property<string>("FResponseId")
                        .HasColumnType("TEXT")
                        .HasColumnName("f_response_id");

                    b.Property<string>("MFeedbackId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("meeting_id");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("response_text");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("supervisor_id");

                    b.HasKey("FResponseId");

                    b.ToTable("MEETING_FEEDBACK_RESPONSE");
                });

            modelBuilder.Entity("Student_plus.DomainModels.MeetingQA", b =>
                {
                    b.Property<string>("QaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("qa_id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("answer");

                    b.Property<string>("MeetingId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("meeting_id");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("question");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("speaker_name");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.HasKey("QaId");

                    b.ToTable("MEETING_QA");
                });

            modelBuilder.Entity("Student_plus.DomainModels.MeetingRecording", b =>
                {
                    b.Property<string>("RecordingId")
                        .HasColumnType("TEXT")
                        .HasColumnName("recording_id");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("duration");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<string>("VideoFilePath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("video_file_path");

                    b.HasKey("RecordingId");

                    b.ToTable("MEETING_RECORDING");
                });

            modelBuilder.Entity("Student_plus.DomainModels.MeetingRequest", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("TEXT")
                        .HasColumnName("request_id");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<string>("DecisionDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("decision_date");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("Organiser")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("organiser");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("topic");

                    b.HasKey("RequestId");

                    b.ToTable("MEETING_REQUEST");
                });
#pragma warning restore 612, 618
        }
    }
}
